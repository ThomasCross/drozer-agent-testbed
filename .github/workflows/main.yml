name: Release Drozer Agent

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., 3.1.0). Add build numbers (e.g. 3.1.0-1) if re-uploads are required.'
        required: true

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version_step.outputs.version }}
    steps:
      - name: Determine version
        id: version_step
        run: |
          VERSION=""
          if [ "${{ github.event_name }}" == "release" ]; then
            VERSION=$(echo "${{ github.event.release.tag_name }}" | sed 's/^v//')
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "Version determined: $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
  
  update-version:
    name: Update Version Number in `src/drozer/__init__.py`
    runs-on: ubuntu-latest
    needs: get-version
    if: ${{ needs.get-version.outputs.version != '' && (github.event_name == 'release' || github.event.inputs.update_version == 'true') }}
    
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          ref: 'develop'

      - name: Update version in __init__.py
        run: |
          VERSION=${{ needs.get-version.outputs.version }}
          echo "Updating version to $VERSION in src/drozer/__init__.py"
          sed -i "s/__version__ = .*/__version__ = \"$VERSION\"/" src/drozer/__init__.py
      - name: Verify file content
        run: cat src/drozer/__init__.py

      - name: Commit and push changes
        run: |
          git config --global user.name 'Publish-o-tron[bot]'
          git config --global user.email 'Publish-o-tron[bot]@users.noreply.github.com'
          git add src/drozer/__init__.py
          git commit -m "chore: Update version to ${{ needs.get-version.outputs.version }}"
          git push

  github-release:
    name: Attach Assets to GitHub Release
    runs-on: ubuntu-latest
    #needs: pypi # Ensures packages are built and uploaded as artifacts first
    if: github.event_name == 'release' # This condition is the key to your request
    
    permissions:
      contents: write # Required to write to a release

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          ref: 'develop'
  
      - name: Download built Python packages
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist

      - name: Display structure of downloaded files
        run: ls -R

      - name: Upload assets to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          find dist/ -maxdepth 1 -type f ! -name '*.publish.attestation' | xargs \
            gh release upload ${{ github.event.release.tag_name }}
